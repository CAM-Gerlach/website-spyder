title: Introducing the unittest plugin
---
pub_date: 2018-02-23 00:00
---
tags: unittest
---
category: Spyder
---
author: jitseniesen
---
summary: We introduce the Spyder unittest plugin, which can run tests and display the results right inside the IDE, with a real world example.
---
body:

The new [Spyder unittest plugin](https://github.com/spyder-ide/spyder-unittest) lets you run tests and view the results, all within the IDE. Here, I'll demonstrate what it (and testing in Python) can do by way of a real-world example.

There are numerous unit testing frameworks available for Python, many of which the plugin supports. However, I'm using my favorite here, [pytest](https://pytest.org/), and writing the tests in a separate file from the code.


### Installing the plugin

If you use the Anaconda distribution (as we recommend), then you can install the Spyder unittest plugin with the command

```bash
conda install -c spyder-ide spyder-unittest
```

which will also grab all its mandatory dependencies (including Spyder itself if necessary). The `-c` option instructs `conda` to use the custom channel `spyder-ide` run by the Spyder developers, since the plugin isn't part of the default channel.

Since we will be using the `pytest` framework, you also need to install it:

```bash
conda install pytest
```

We'll be running Python 3.6.4, Spyder 3.2.6, `spyder-unittest` 0.3.0 and `pytest` 3.3.2 for this example.


### Creating a project

I'll be using separate files for the tests and the code to be tested, so let's start by creating a project which will contain these files. In the `Projects` menu, click on `New Project ...`. Enter a name for the project (in my example, `prime_example`), and under `Location`, select the directory in which to store it. Click `Create`.

!["Create new project" window](new-project.png)


### Writing code to be tested

Create a Python file `primes.py` with the following function, which checks whether a number is prime:

```python
def is_prime(number):
    """Return True if `number` is prime."""
    for element in range(2, number):
        if number % element == 0:
            return False
    return True
```

This example is taken from the blog post [Improve Your Python: Understanding Unit Testing](https://jeffknupp.com/blog/2013/12/09/improve-your-python-understanding-unit-testing/) by Jeff Knupp.


### Writing the tests

To test our `is_prime` function, we will write two tests: one to check that `5` is considered a prime, and one to ensure `4` is not. They can be implemented as follows:

```python
from primes import is_prime

def test_five_is_prime():
    assert is_prime(5) == True
    
def test_four_is_not_prime():
    assert is_prime(4) == False
```

We'll save this code in the file `test_primes.py`. It is important to ensure that both the test functions and the file containing them have names starting with `test_`; otherwise, `pytest` might not be able to find them automatically.

In Spyder, the project now looks as follows:

![Spyder window with code](code.png)


### Running the tests

Now comes the part where we actually use the plugin. In the `Run` menu, select `Run unit tests`. If you do not see this menu item, then the plugin is not installed; refer to the installation instructions above.

A window appears in which to configure the test run. Select `pytest` as test framework, and note the project is automatically selected as the directory in which to find tests. This is one of the advantages of using a project; another is that Spyder will remember which testing framework to use for each one.

!["Configure tests" window](test-config.png)

Press the `OK` button to run the tests. The results will appear in a new pane called "Unit testing":

![Test results in Spyder windows](test-results.png)

As you can see, both tests pass. This means that our function correctly identifies `5` as prime and `4` as not prime.


### A failing test

Unfortunately, our function `is_prime` has a bug. The number `1` is not considered a prime, but `is_prime(1)` in fact returns `True`. Therefore, to test for this, we add the following code to `test_primes.py`:

```python
def test_one_is_not_prime():
    assert is_prime(1) == False
```

Now, run the tests again by clicking on `Run unit tests` in the `Run` menu. Spyder remembers the configuration so you are not asked for it again. This time, the results are:

![Test results in Spyder windows](test-results2.png)

Our new test fails. The details clarify that `is_prime(1)` returns `True`, while the assert in the test function claims that it should return `False`.


### Where to go from here

With this demonstration under your belt, you should be write tests for your code and run them with the plugin. For example, try fixing the bug so that `1` is correctly identified as non-prime, and run the tests again to check verify it.

`Spyder-unittest` supports not only the `pytest` framework, but also the `nose` and the `unittest` modules in the Python standard library. It is still fairly new (as its version number suggests), so I look forward to your comments. Please send your ideas, bug reports and pull requests to the [spyder-unittest](https://github.com/spyder-ide/spyder-unittest) repo on Github.
